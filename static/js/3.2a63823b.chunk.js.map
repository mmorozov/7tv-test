{"version":3,"sources":["store/selectors/index.js","utils/map-state.js","store/actions/call-api.js","utils/create-url.js","store/resources.js","utils/set-document-title.js","pages/post/styles.module.css","components/comment/index.js","components/comments-list/index.js","components/author/index.js","providers/user.js","utils/to-int.js","providers/post-comments.js","store/selectors/comments.js","pages/post/index.js"],"names":["createResourceSelector","defaults","path","resource","query","resourceSpec","getResource","pathOr","Object","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","concat","createUrl","url","console","warn","always","selectMeta","fetching","fetched","error","selectEntity","_ref","entity","id","selectCollection","selectExpandedCollection","state","compose","map","__webpack_exports__","selectors","_len","arguments","length","args","Array","_key","toPairs","reduce","acc","_ref2","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","key","selector","apply","makeType","curry","toUpper","join","action","callAPI","undefined","data","type","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","CALL_API","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","createURL","types","success","failure","request","mapDispatchToProps","dispatch","pipe","ramda__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","url_template__WEBPACK_IMPORTED_MODULE_1__","url_template__WEBPACK_IMPORTED_MODULE_1___default","n","params","exclude","template","parse","expand","omit","normalizr__WEBPACK_IMPORTED_MODULE_1__","post","schema","Entity","user","comment","normalizr","entityName","normalized","result","isArray","flip","normalize","RESOURCES_MAP","posts","cache","transform","_","has","comments","d","useDocumentTitle","react__WEBPACK_IMPORTED_MODULE_0__","title","useEffect","document","module","exports","back","Comment","email","body","react_default","a","createElement","Fragment","CommentsList","_ref$meta","meta","status","loader","assign","Author","author","name","website","extractId","connect","props","mapState","render","parseInt","filter","equals","toInt","prop","selectCommentsByPostId","Post","className","classNames","authorRenderer","objectWithoutProperties","postId","Link","to","providers_user","post_comments"],"mappings":"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","file":"static/js/3.2a63823b.chunk.js","sourcesContent":["import { pathOr, always, compose, map } from 'ramda';\n\nimport getResource from '../resources';\n\nimport createUrl from '../../utils/create-url';\n\nconst createResourceSelector = (defaults, path) => (resource, query) => {\n  const resourceSpec = getResource(resource);\n\n  if (!resourceSpec) {\n    console.warn('Undefined resource', resource);\n    return always(defaults);\n  }\n\n  return pathOr(defaults, [...path, createUrl(resourceSpec.url, query)]);\n};\n\nexport const selectMeta = createResourceSelector(\n  {\n    fetching: false,\n    fetched: null,\n    error: null,\n  },\n  ['meta']\n);\n\nexport const selectEntity = ({ entity, id }) =>\n  pathOr(null, ['entities', entity, id]);\n\nexport const selectCollection = createResourceSelector([], ['collections']);\n\nexport const selectExpandedCollection = (resource, query) => state => {\n  return compose(\n    map(entity => selectEntity(entity)(state)),\n    selectCollection(resource, query)\n  )(state);\n};\n","import { toPairs } from 'ramda';\n\nexport default selectors => (...args) => {\n  return toPairs(selectors).reduce((acc, [key, selector]) => {\n    acc[key] = selector(...args);\n    return acc;\n  }, {});\n};\n","import { join, compose, toUpper, curry, pipe } from 'ramda';\n\nimport { CALL_API } from '../constants';\nimport createURL from '../../utils/create-url';\nimport getResource from '../resources';\n\nexport const makeType = curry(\n  compose(\n    toUpper,\n    join('.'),\n    (resource, action) => [resource, action]\n  )\n);\n\nconst callAPI = (resource, query = {}, data) => {\n  const resourceSpec = getResource(resource);\n\n  if (!resourceSpec) {\n    return {\n      type: makeType('undefined')('resource'),\n      resource,\n    };\n  }\n\n  const type = makeType(resource);\n\n  return {\n    type: type('action'),\n    [CALL_API]: {\n      ...resourceSpec,\n      query,\n      data,\n      url: createURL(resourceSpec.url, query),\n      types: {\n        success: type('success'),\n        failure: type('failure'),\n        request: type('request'),\n      },\n    },\n  };\n};\n\nexport const mapDispatchToProps = dispatch => ({\n  dispatch,\n  callAPI: pipe(\n    callAPI,\n    dispatch\n  ),\n});\n\nexport default callAPI;\n","import { omit } from 'ramda';\nimport template from 'url-template';\n\nexport default (url, params, exclude = []) => {\n  if (!url) return null;\n\n  return template.parse(url).expand(omit(exclude, params));\n};\n","import { pathOr, flip, compose, has } from 'ramda';\nimport { normalize, schema } from 'normalizr';\n\nconst post = new schema.Entity('post');\nconst user = new schema.Entity('user');\nconst comment = new schema.Entity('comment');\n\nconst normalizr = (entityName, schema) =>\n  compose(\n    normalized => {\n      if (!normalized.result || !Array.isArray(normalized.result)) {\n        return normalized;\n      }\n\n      normalized.result = normalized.result.map(id => ({\n        id,\n        entity: entityName,\n      }));\n\n      return normalized;\n    },\n    flip(normalize)(schema)\n  );\n\nexport const RESOURCES_MAP = {\n  posts: {\n    url: '/posts',\n    cache: true,\n    transform: normalizr('post', [post]),\n  },\n  post: {\n    url: '/posts/{id}',\n    cache: (state, _, { id }) =>\n      compose(\n        has(id),\n        pathOr({}, ['entities', 'post'])\n      )(state),\n    transform: normalizr('post', post),\n  },\n  user: {\n    url: '/users/{id}',\n    cache: true,\n    transform: normalizr('user', user),\n  },\n  comments: {\n    url: '/comments',\n    cache: true,\n    transform: normalizr('comment', [comment]),\n  },\n};\n\nexport default resource => pathOr(null, [resource], RESOURCES_MAP);\n","import { useEffect } from 'react';\n\nexport function useDocumentTitle(title) {\n  useEffect(\n    () => {\n      document.title = title;\n      return () => (document.title = '');\n    },\n    [title]\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"back\":\"styles_back__3HR2l\",\"post\":\"styles_post__1yogm\"};","import React from 'react';\n\nexport default function Comment({ id, email, body }) {\n  return (\n    <React.Fragment key={id}>\n      <p>\n        <b>{email}</b>\n      </p>\n      <p>{body}</p>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Comment from '../comment';\n\nimport Loader from '../loader';\n\nexport default function CommentsList({ comments, meta = {} }) {\n  return (\n    <React.Fragment>\n      <h3>Comments</h3>\n\n      {!!meta.error && <p>Error: {meta.error.status}</p>}\n      {meta.fetching && !comments.length && <Loader />}\n      {meta.fetched && !comments.length && <p>No comments</p>}\n\n      {comments.map(comment => (\n        <Comment {...comment} key={comment.id} />\n      ))}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\n\nexport default function Author(author) {\n  if (!author) return null;\n\n  const { id, name, website } = author;\n\n  return (\n    <h4 key={id}>\n      {name} ({website})\n    </h4>\n  );\n}\n","import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { path } from 'ramda';\n\nimport { selectMeta, selectEntity } from '../store/selectors';\nimport { mapDispatchToProps } from '../store/actions/call-api';\n\nimport mapState from '../utils/map-state';\n\nconst extractId = path(['id']);\n\nfunction UserProvider({ id, callAPI, user, meta, render }) {\n  useEffect(\n    () => {\n      if (!!id) {\n        callAPI('user', { id: id });\n      }\n    },\n    [id]\n  );\n\n  return render({ user, meta });\n}\n\nexport default connect(\n  (state, props) => {\n    const id = extractId(props);\n\n    return mapState({\n      meta: selectMeta('user', { id }),\n      user: selectEntity({ entity: 'user', id }),\n    })(state);\n  },\n  mapDispatchToProps\n)(UserProvider);\n","import { flip } from 'ramda';\n\nexport default flip(parseInt)(10);\n","import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { path } from 'ramda';\n\nimport { selectMeta } from '../store/selectors';\nimport { selectCommentsByPostId } from '../store/selectors/comments';\nimport { mapDispatchToProps } from '../store/actions/call-api';\n\nimport mapState from '../utils/map-state';\n\nconst extractId = path(['postId']);\n\nfunction PostCommentsProvider({ callAPI, comments, meta, render }) {\n  useEffect(() => {\n    callAPI('comments');\n  }, []);\n\n  return render({ comments, meta });\n}\n\nexport default connect(\n  (state, props) => {\n    const id = extractId(props);\n\n    return mapState({\n      meta: selectMeta('comments'),\n      comments: selectCommentsByPostId(id),\n    })(state);\n  },\n  mapDispatchToProps\n)(PostCommentsProvider);\n","import { prop, compose, filter, equals } from 'ramda';\nimport { selectExpandedCollection } from '.';\n\nimport toInt from '../../utils/to-int';\n\nexport const selectCommentsByPostId = id =>\n  compose(\n    filter(\n      compose(\n        equals(toInt(id)),\n        prop('postId')\n      )\n    ),\n    selectExpandedCollection('comments')\n  );\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { path, prop } from 'ramda';\nimport { Link } from 'react-router-dom';\n\nimport { mapDispatchToProps } from '../../store/actions/call-api';\nimport { selectMeta, selectEntity } from '../../store/selectors';\n\nimport CommentsList from '../../components/comments-list';\nimport Loader from '../../components/loader';\nimport Author from '../../components/author';\n\nimport mapState from '../../utils/map-state';\nimport { useDocumentTitle } from '../../utils/set-document-title';\n\nimport UserProvider from '../../providers/user';\nimport PostCommentsProvider from '../../providers/post-comments';\n\nimport classNames from './styles.module.css';\n\nconst extractId = path(['match', 'params', 'id']);\n\nfunction Post(post) {\n  if (!post) return null;\n\n  return (\n    <div className={classNames.post}>\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n    </div>\n  );\n}\n\nconst authorRenderer = ({ user: author }) => {\n  if (!author) return null;\n\n  return (\n    <>\n      <h3>Author</h3>\n      <Author {...author} />\n    </>\n  );\n};\n\nfunction PostPage({ callAPI, meta, post, ...props }) {\n  const postId = extractId(props);\n\n  useEffect(\n    () => {\n      callAPI('post', { id: postId });\n    },\n    [postId]\n  );\n\n  useDocumentTitle(prop('title', post));\n\n  return (\n    <div className=\"page\">\n      <Link to=\"/\" className={classNames.back}>\n        ← Back\n      </Link>\n\n      {!!meta.error && <p>Error: {meta.error.status}</p>}\n      {meta.fetching && !post && <Loader />}\n      <Post {...post} />\n      {!!post && (\n        <UserProvider id={prop('userId', post)} render={authorRenderer} />\n      )}\n      <PostCommentsProvider postId={postId} render={CommentsList} />\n    </div>\n  );\n}\n\nexport default connect(\n  (_, props) => {\n    const id = extractId(props);\n    return mapState({\n      post: selectEntity({ entity: 'post', id }),\n      meta: selectMeta('post', { id }),\n    });\n  },\n  mapDispatchToProps\n)(PostPage);\n"],"sourceRoot":""}