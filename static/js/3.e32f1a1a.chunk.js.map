{"version":3,"sources":["utils/map-state.js","store/selectors/index.js","store/actions/call-api.js","utils/create-url.js","store/resources.js","pages/post/styles.module.css","components/comment/index.js","components/comments-list/index.js","components/author/index.js","providers/user.js","utils/to-int.js","providers/post-comments.js","store/selectors/comments.js","pages/post/index.js"],"names":["__webpack_exports__","selectors","_len","arguments","length","args","Array","_key","toPairs","reduce","acc","_ref","_ref2","Object","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","key","selector","apply","createResourceSelector","defaults","path","resource","query","resourceSpec","getResource","pathOr","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","concat","createUrl","url","console","warn","always","selectMeta","fetching","fetched","error","selectEntity","entity","id","selectCollection","selectExpandedCollection","state","compose","map","makeType","curry","toUpper","join","action","callAPI","undefined","data","type","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","CALL_API","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","createURL","types","success","failure","request","mapDispatchToProps","dispatch","pipe","ramda__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","url_template__WEBPACK_IMPORTED_MODULE_1__","url_template__WEBPACK_IMPORTED_MODULE_1___default","n","params","exclude","template","parse","expand","omit","normalizr__WEBPACK_IMPORTED_MODULE_1__","post","schema","Entity","user","comment","normalizr","entityName","normalized","result","isArray","flip","normalize","RESOURCES_MAP","posts","cache","transform","_","has","comments","module","exports","back","Comment","email","body","react_default","a","createElement","Fragment","CommentsList","_ref$meta","meta","status","loader","assign","Author","author","name","website","extractId","connect","props","mapState","render","useEffect","parseInt","filter","equals","toInt","prop","selectCommentsByPostId","Post","className","classNames","title","authorRenderer","objectWithoutProperties","postId","Link","to","providers_user","post_comments"],"mappings":"4GAEeA,EAAA,WAAAC,GAAS,OAAI,WAAa,QAAAC,EAAAC,UAAAC,OAATC,EAAS,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAATF,EAASE,GAAAJ,UAAAI,GACvC,OAAOC,YAAQP,GAAWQ,OAAO,SAACC,EAADC,GAA0B,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAAnBI,EAAmBH,EAAA,GAAdI,EAAcJ,EAAA,GAEzD,OADAF,EAAIK,GAAOC,EAAQC,WAAR,EAAYZ,GAChBK,GACN,0KCACQ,EAAyB,SAACC,EAAUC,GAAX,OAAoB,SAACC,EAAUC,GAC5D,IAAMC,EAAeC,YAAYH,GAEjC,OAAKE,EAKEE,YAAON,EAADN,OAAAa,EAAA,EAAAb,CAAeO,GAAfO,OAAA,CAAqBC,YAAUL,EAAaM,IAAKP,OAJ5DQ,QAAQC,KAAK,qBAAsBV,GAC5BW,YAAOb,MAMLc,EAAaf,EACxB,CACEgB,UAAU,EACVC,QAAS,KACTC,MAAO,MAET,CAAC,SAGUC,EAAe,SAAA1B,GAAA,IAAG2B,EAAH3B,EAAG2B,OAAQC,EAAX5B,EAAW4B,GAAX,OAC1Bd,YAAO,KAAM,CAAC,WAAYa,EAAQC,KAEvBC,EAAmBtB,EAAuB,GAAI,CAAC,gBAE/CuB,EAA2B,SAACpB,EAAUC,GAAX,OAAqB,SAAAoB,GAC3D,OAAOC,YACLC,YAAI,SAAAN,GAAM,OAAID,EAAaC,EAAbD,CAAqBK,KACnCF,EAAiBnB,EAAUC,GAFtBqB,CAGLD,uHC7BSG,EAAWC,YACtBH,YACEI,IACAC,YAAK,KACL,SAAC3B,EAAU4B,GAAX,MAAsB,CAAC5B,EAAU4B,MAI/BC,EAAU,SAAC7B,GAA+B,IAArBC,EAAqBnB,UAAAC,OAAA,QAAA+C,IAAAhD,UAAA,GAAAA,UAAA,GAAb,GAAIiD,EAASjD,UAAAC,OAAA,EAAAD,UAAA,QAAAgD,EACxC5B,EAAeC,YAAYH,GAEjC,IAAKE,EACH,MAAO,CACL8B,KAAMR,EAAS,YAATA,CAAsB,YAC5BxB,YAIJ,IAAMgC,EAAOR,EAASxB,GAEtB,OAAOR,OAAAyC,EAAA,EAAAzC,CAAA,CACLwC,KAAMA,EAAK,WACVE,IAFH1C,OAAA2C,EAAA,EAAA3C,CAAA,GAGOU,EAHP,CAIID,QACA8B,OACAvB,IAAK4B,YAAUlC,EAAaM,IAAKP,GACjCoC,MAAO,CACLC,QAASN,EAAK,WACdO,QAASP,EAAK,WACdQ,QAASR,EAAK,gBAMTS,EAAqB,SAAAC,GAAQ,MAAK,CAC7CA,WACAb,QAASc,YACPd,EACAa,sCC9CJ,IAAAE,EAAAC,EAAA,GAAAC,EAAAD,EAAA,IAAAE,EAAAF,EAAAG,EAAAF,GAGenE,EAAA,WAAC6B,EAAKyC,GAAyB,IAAjBC,EAAiBpE,UAAAC,OAAA,QAAA+C,IAAAhD,UAAA,GAAAA,UAAA,GAAP,GACrC,OAAK0B,EAEE2C,IAASC,MAAM5C,GAAK6C,OAAOC,YAAKJ,EAASD,IAF/B,uCCJnB,IAAAL,EAAAC,EAAA,GAAAU,EAAAV,EAAA,IAGMW,EAAO,IAAIC,IAAOC,OAAO,QACzBC,EAAO,IAAIF,IAAOC,OAAO,QACzBE,EAAU,IAAIH,IAAOC,OAAO,WAE5BG,EAAY,SAACC,EAAYL,GAAb,OAChBnC,YACE,SAAAyC,GACE,OAAKA,EAAWC,QAAW/E,MAAMgF,QAAQF,EAAWC,SAIpDD,EAAWC,OAASD,EAAWC,OAAOzC,IAAI,SAAAL,GAAE,MAAK,CAC/CA,KACAD,OAAQ6C,KAGHC,GAREA,GAUXG,YAAKC,IAALD,CAAgBT,KAGPW,EAAgB,CAC3BC,MAAO,CACL7D,IAAK,SACL8D,OAAO,EACPC,UAAWV,EAAU,OAAQ,CAACL,KAEhCA,KAAM,CACJhD,IAAK,cACL8D,MAAO,SAACjD,EAAOmD,EAARlF,GAAA,IAAa4B,EAAb5B,EAAa4B,GAAb,OACLI,YACEmD,YAAIvD,GACJd,YAAO,GAAI,CAAC,WAAY,SAF1BkB,CAGED,IACJkD,UAAWV,EAAU,OAAQL,IAE/BG,KAAM,CACJnD,IAAK,cACL8D,OAAO,EACPC,UAAWV,EAAU,OAAQF,IAE/Be,SAAU,CACRlE,IAAK,YACL8D,OAAO,EACPC,UAAWV,EAAU,UAAW,CAACD,MAItBjF,EAAA,WAAAqB,GAAQ,OAAII,YAAO,KAAM,CAACJ,GAAWoE,wBClDpDO,EAAAC,QAAA,CAAkBC,KAAA,qBAAArB,KAAA,iICCH,SAASsB,EAATxF,GAAsC,IAAnB4B,EAAmB5B,EAAnB4B,GAAI6D,EAAezF,EAAfyF,MAAOC,EAAQ1F,EAAR0F,KAC3C,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,CAAgB1F,IAAKwB,GACnB+D,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SAAIJ,IAENE,EAAAC,EAAAC,cAAA,SAAIH,gBCHK,SAASK,EAAT/F,GAA+C,IAAvBoF,EAAuBpF,EAAvBoF,SAAuBY,EAAAhG,EAAbiG,YAAa,IAAAD,EAAN,GAAMA,EAC5D,OACEL,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,wBAEGI,EAAKxE,OAASkE,EAAAC,EAAAC,cAAA,mBAAWI,EAAKxE,MAAMyE,QACtCD,EAAK1E,WAAa6D,EAAS3F,QAAUkG,EAAAC,EAAAC,cAACM,EAAA,EAAD,MACrCF,EAAKzE,UAAY4D,EAAS3F,QAAUkG,EAAAC,EAAAC,cAAA,wBAEpCT,EAASnD,IAAI,SAAAqC,GAAO,OACnBqB,EAAAC,EAAAC,cAACL,EAADtF,OAAAkG,OAAA,GAAa9B,EAAb,CAAsBlE,IAAKkE,EAAQ1C,SCb5B,SAASyE,EAAOC,GAC7B,IAAKA,EAAQ,OAAO,KADiB,IAG7B1E,EAAsB0E,EAAtB1E,GAAI2E,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAElB,OACEb,EAAAC,EAAAC,cAAA,MAAIzF,IAAKwB,GACN2E,EADH,KACWC,EADX,iBCCEC,EAAYhG,YAAK,CAAC,OAeTiG,kBACb,SAAC3E,EAAO4E,GACN,IAAM/E,EAAK6E,EAAUE,GAErB,OAAOC,YAAS,CACdX,KAAM3E,YAAW,OAAQ,CAAEM,OAC3ByC,KAAM3C,YAAa,CAAEC,OAAQ,OAAQC,QAFhCgF,CAGJ7E,IAELoB,IATauD,CAbf,SAAA1G,GAA2D,IAAnC4B,EAAmC5B,EAAnC4B,GAAIW,EAA+BvC,EAA/BuC,QAAS8B,EAAsBrE,EAAtBqE,KAAM4B,EAAgBjG,EAAhBiG,KAAMY,EAAU7G,EAAV6G,OAU/C,OATAC,oBACE,WACQlF,GACJW,EAAQ,OAAQ,CAAEX,GAAIA,KAG1B,CAACA,IAGIiF,EAAO,CAAExC,OAAM4B,WCnBTrB,cAAKmC,SAALnC,CAAe,ICQxB6B,EAAYhG,YAAK,CAAC,WAUTiG,kBACb,SAAC3E,EAAO4E,GACN,IAAM/E,EAAK6E,EAAUE,GAErB,OAAOC,YAAS,CACdX,KAAM3E,YAAW,YACjB8D,SCrBgC,SAAAxD,GAAE,OACtCI,YACEgF,YACEhF,YACEiF,YAAOC,EAAMtF,IACbuF,YAAK,YAGTrF,YAAyB,aDabsF,CAAuBxF,IAF5BgF,CAGJ7E,IAELoB,IATauD,CARf,SAAA1G,GAAmE,IAAnCuC,EAAmCvC,EAAnCuC,QAAS6C,EAA0BpF,EAA1BoF,SAAUa,EAAgBjG,EAAhBiG,KAAMY,EAAU7G,EAAV6G,OAKvD,OAJAC,oBAAU,WACRvE,EAAQ,aACP,IAEIsE,EAAO,CAAEzB,WAAUa,4BECtBQ,EAAYhG,YAAK,CAAC,QAAS,SAAU,OAE3C,SAAS4G,EAAKnD,GACZ,OAAKA,EAGHyB,EAAAC,EAAAC,cAAA,OAAKyB,UAAWC,IAAWrD,MACzByB,EAAAC,EAAAC,cAAA,UAAK3B,EAAKsD,OACV7B,EAAAC,EAAAC,cAAA,SAAI3B,EAAKwB,OALK,KAUpB,IAAM+B,EAAiB,SAAAzH,GAAsB,IAAbsG,EAAatG,EAAnBqE,KACxB,OAAKiC,EAGHX,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACQ,EAAWC,IALI,MAqCPI,sBACb,SAACxB,EAAGyB,GACF,IAAM/E,EAAK6E,EAAUE,GACrB,OAAOC,YAAS,CACd1C,KAAMxC,YAAa,CAAEC,OAAQ,OAAQC,OACrCqE,KAAM3E,YAAW,OAAQ,CAAEM,UAG/BuB,IARauD,CA3Bf,SAAAzG,GAAqD,IAAjCsC,EAAiCtC,EAAjCsC,QAAS0D,EAAwBhG,EAAxBgG,KAAM/B,EAAkBjE,EAAlBiE,KAASyC,EAASzG,OAAAwH,EAAA,EAAAxH,CAAAD,EAAA,2BAC7C0H,EAASlB,EAAUE,GASzB,OAPAG,oBACE,WACEvE,EAAQ,OAAQ,CAAEX,GAAI+F,KAExB,CAACA,IAIDhC,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,QACb3B,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,GAAG,IAAIP,UAAWC,IAAWhC,MAAnC,iBAIGU,EAAKxE,OAASkE,EAAAC,EAAAC,cAAA,mBAAWI,EAAKxE,MAAMyE,QACtCD,EAAK1E,WAAa2C,GAAQyB,EAAAC,EAAAC,cAACM,EAAA,EAAD,MAC3BR,EAAAC,EAAAC,cAACwB,EAASnD,KACPA,GACDyB,EAAAC,EAAAC,cAACiC,EAAD,CAAclG,GAAIuF,YAAK,SAAUjD,GAAO2C,OAAQY,IAElD9B,EAAAC,EAAAC,cAACkC,EAAD,CAAsBJ,OAAQA,EAAQd,OAAQd","file":"static/js/3.e32f1a1a.chunk.js","sourcesContent":["import { toPairs } from 'ramda';\n\nexport default selectors => (...args) => {\n  return toPairs(selectors).reduce((acc, [key, selector]) => {\n    acc[key] = selector(...args);\n    return acc;\n  }, {});\n};\n","import { pathOr, always, compose, map } from 'ramda';\n\nimport getResource from '../resources';\n\nimport createUrl from '../../utils/create-url';\n\nconst createResourceSelector = (defaults, path) => (resource, query) => {\n  const resourceSpec = getResource(resource);\n\n  if (!resourceSpec) {\n    console.warn('Undefined resource', resource);\n    return always(defaults);\n  }\n\n  return pathOr(defaults, [...path, createUrl(resourceSpec.url, query)]);\n};\n\nexport const selectMeta = createResourceSelector(\n  {\n    fetching: false,\n    fetched: null,\n    error: null,\n  },\n  ['meta']\n);\n\nexport const selectEntity = ({ entity, id }) =>\n  pathOr(null, ['entities', entity, id]);\n\nexport const selectCollection = createResourceSelector([], ['collections']);\n\nexport const selectExpandedCollection = (resource, query) => state => {\n  return compose(\n    map(entity => selectEntity(entity)(state)),\n    selectCollection(resource, query)\n  )(state);\n};\n","import { join, compose, toUpper, curry, pipe } from 'ramda';\n\nimport { CALL_API } from '../constants';\nimport createURL from '../../utils/create-url';\nimport getResource from '../resources';\n\nexport const makeType = curry(\n  compose(\n    toUpper,\n    join('.'),\n    (resource, action) => [resource, action]\n  )\n);\n\nconst callAPI = (resource, query = {}, data) => {\n  const resourceSpec = getResource(resource);\n\n  if (!resourceSpec) {\n    return {\n      type: makeType('undefined')('resource'),\n      resource,\n    };\n  }\n\n  const type = makeType(resource);\n\n  return {\n    type: type('action'),\n    [CALL_API]: {\n      ...resourceSpec,\n      query,\n      data,\n      url: createURL(resourceSpec.url, query),\n      types: {\n        success: type('success'),\n        failure: type('failure'),\n        request: type('request'),\n      },\n    },\n  };\n};\n\nexport const mapDispatchToProps = dispatch => ({\n  dispatch,\n  callAPI: pipe(\n    callAPI,\n    dispatch\n  ),\n});\n\nexport default callAPI;\n","import { omit } from 'ramda';\nimport template from 'url-template';\n\nexport default (url, params, exclude = []) => {\n  if (!url) return null;\n\n  return template.parse(url).expand(omit(exclude, params));\n};\n","import { pathOr, flip, compose, has } from 'ramda';\nimport { normalize, schema } from 'normalizr';\n\nconst post = new schema.Entity('post');\nconst user = new schema.Entity('user');\nconst comment = new schema.Entity('comment');\n\nconst normalizr = (entityName, schema) =>\n  compose(\n    normalized => {\n      if (!normalized.result || !Array.isArray(normalized.result)) {\n        return normalized;\n      }\n\n      normalized.result = normalized.result.map(id => ({\n        id,\n        entity: entityName,\n      }));\n\n      return normalized;\n    },\n    flip(normalize)(schema)\n  );\n\nexport const RESOURCES_MAP = {\n  posts: {\n    url: '/posts',\n    cache: true,\n    transform: normalizr('post', [post]),\n  },\n  post: {\n    url: '/posts/{id}',\n    cache: (state, _, { id }) =>\n      compose(\n        has(id),\n        pathOr({}, ['entities', 'post'])\n      )(state),\n    transform: normalizr('post', post),\n  },\n  user: {\n    url: '/users/{id}',\n    cache: true,\n    transform: normalizr('user', user),\n  },\n  comments: {\n    url: '/comments',\n    cache: true,\n    transform: normalizr('comment', [comment]),\n  },\n};\n\nexport default resource => pathOr(null, [resource], RESOURCES_MAP);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"back\":\"styles_back__3HR2l\",\"post\":\"styles_post__1yogm\"};","import React from 'react';\n\nexport default function Comment({ id, email, body }) {\n  return (\n    <React.Fragment key={id}>\n      <p>\n        <b>{email}</b>\n      </p>\n      <p>{body}</p>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport Comment from '../comment';\n\nimport Loader from '../loader';\n\nexport default function CommentsList({ comments, meta = {} }) {\n  return (\n    <React.Fragment>\n      <h3>Comments</h3>\n\n      {!!meta.error && <p>Error: {meta.error.status}</p>}\n      {meta.fetching && !comments.length && <Loader />}\n      {meta.fetched && !comments.length && <p>No comments</p>}\n\n      {comments.map(comment => (\n        <Comment {...comment} key={comment.id} />\n      ))}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\n\nexport default function Author(author) {\n  if (!author) return null;\n\n  const { id, name, website } = author;\n\n  return (\n    <h4 key={id}>\n      {name} ({website})\n    </h4>\n  );\n}\n","import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { path } from 'ramda';\n\nimport { selectMeta, selectEntity } from '../store/selectors';\nimport { mapDispatchToProps } from '../store/actions/call-api';\n\nimport mapState from '../utils/map-state';\n\nconst extractId = path(['id']);\n\nfunction UserProvider({ id, callAPI, user, meta, render }) {\n  useEffect(\n    () => {\n      if (!!id) {\n        callAPI('user', { id: id });\n      }\n    },\n    [id]\n  );\n\n  return render({ user, meta });\n}\n\nexport default connect(\n  (state, props) => {\n    const id = extractId(props);\n\n    return mapState({\n      meta: selectMeta('user', { id }),\n      user: selectEntity({ entity: 'user', id }),\n    })(state);\n  },\n  mapDispatchToProps\n)(UserProvider);\n","import { flip } from 'ramda';\n\nexport default flip(parseInt)(10);\n","import { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { path } from 'ramda';\n\nimport { selectMeta } from '../store/selectors';\nimport { selectCommentsByPostId } from '../store/selectors/comments';\nimport { mapDispatchToProps } from '../store/actions/call-api';\n\nimport mapState from '../utils/map-state';\n\nconst extractId = path(['postId']);\n\nfunction PostCommentsProvider({ callAPI, comments, meta, render }) {\n  useEffect(() => {\n    callAPI('comments');\n  }, []);\n\n  return render({ comments, meta });\n}\n\nexport default connect(\n  (state, props) => {\n    const id = extractId(props);\n\n    return mapState({\n      meta: selectMeta('comments'),\n      comments: selectCommentsByPostId(id),\n    })(state);\n  },\n  mapDispatchToProps\n)(PostCommentsProvider);\n","import { prop, compose, filter, equals } from 'ramda';\nimport { selectExpandedCollection } from '.';\n\nimport toInt from '../../utils/to-int';\n\nexport const selectCommentsByPostId = id =>\n  compose(\n    filter(\n      compose(\n        equals(toInt(id)),\n        prop('postId')\n      )\n    ),\n    selectExpandedCollection('comments')\n  );\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { path, prop } from 'ramda';\nimport { Link } from 'react-router-dom';\n\nimport { mapDispatchToProps } from '../../store/actions/call-api';\nimport { selectMeta, selectEntity } from '../../store/selectors';\n\nimport CommentsList from '../../components/comments-list';\nimport Loader from '../../components/loader';\nimport Author from '../../components/author';\nimport mapState from '../../utils/map-state';\n\nimport UserProvider from '../../providers/user';\nimport PostCommentsProvider from '../../providers/post-comments';\n\nimport classNames from './styles.module.css';\n\nconst extractId = path(['match', 'params', 'id']);\n\nfunction Post(post) {\n  if (!post) return null;\n\n  return (\n    <div className={classNames.post}>\n      <h1>{post.title}</h1>\n      <p>{post.body}</p>\n    </div>\n  );\n}\n\nconst authorRenderer = ({ user: author }) => {\n  if (!author) return null;\n\n  return (\n    <>\n      <h3>Author</h3>\n      <Author {...author} />\n    </>\n  );\n};\n\nfunction PostPage({ callAPI, meta, post, ...props }) {\n  const postId = extractId(props);\n\n  useEffect(\n    () => {\n      callAPI('post', { id: postId });\n    },\n    [postId]\n  );\n\n  return (\n    <div className=\"page\">\n      <Link to=\"/\" className={classNames.back}>\n        ← Back\n      </Link>\n\n      {!!meta.error && <p>Error: {meta.error.status}</p>}\n      {meta.fetching && !post && <Loader />}\n      <Post {...post} />\n      {!!post && (\n        <UserProvider id={prop('userId', post)} render={authorRenderer} />\n      )}\n      <PostCommentsProvider postId={postId} render={CommentsList} />\n    </div>\n  );\n}\n\nexport default connect(\n  (_, props) => {\n    const id = extractId(props);\n    return mapState({\n      post: selectEntity({ entity: 'post', id }),\n      meta: selectMeta('post', { id }),\n    });\n  },\n  mapDispatchToProps\n)(PostPage);\n"],"sourceRoot":""}