{"version":3,"sources":["utils/map-state.js","store/selectors/index.js","store/actions/call-api.js","utils/create-url.js","store/resources.js","components/mini-post/index.js","providers/comments-count.js","components/posts-list/index.js","pages/posts/index.js"],"names":["__webpack_exports__","selectors","_len","arguments","length","args","Array","_key","toPairs","reduce","acc","_ref","_ref2","Object","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","key","selector","apply","createResourceSelector","defaults","path","resource","query","resourceSpec","getResource","pathOr","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","concat","createUrl","url","console","warn","always","selectMeta","fetching","fetched","error","selectEntity","entity","id","selectCollection","selectExpandedCollection","state","compose","map","makeType","curry","toUpper","join","action","callAPI","undefined","data","type","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","CALL_API","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","createURL","types","success","failure","request","mapDispatchToProps","dispatch","pipe","ramda__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","url_template__WEBPACK_IMPORTED_MODULE_1__","url_template__WEBPACK_IMPORTED_MODULE_1___default","n","params","exclude","template","parse","expand","omit","normalizr__WEBPACK_IMPORTED_MODULE_1__","post","schema","Entity","user","comment","normalizr","entityName","normalized","result","isArray","flip","normalize","RESOURCES_MAP","posts","cache","transform","_","has","comments","CommentsCount","connect","props","mapState","count","prop","countBy","values","withCommentsCount","_ref$count","react_default","a","createElement","Post","counter","objectWithoutProperties","Fragment","Link","to","title","body","PostsList","_ref$counter","_ref$limit","limit","_useState","useState","_useState2","slicedToArray","offset","setOffset","slice","assign","onClick","prevOffset","meta","metaComments","useEffect","className","loader","msg","status"],"mappings":"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","file":"static/js/2.f29bd6a2.chunk.js","sourcesContent":["import { toPairs } from 'ramda';\n\nexport default selectors => (...args) => {\n  return toPairs(selectors).reduce((acc, [key, selector]) => {\n    acc[key] = selector(...args);\n    return acc;\n  }, {});\n};\n","import { pathOr, always, compose, map } from 'ramda';\n\nimport getResource from '../resources';\n\nimport createUrl from '../../utils/create-url';\n\nconst createResourceSelector = (defaults, path) => (resource, query) => {\n  const resourceSpec = getResource(resource);\n\n  if (!resourceSpec) {\n    console.warn('Undefined resource', resource);\n    return always(defaults);\n  }\n\n  return pathOr(defaults, [...path, createUrl(resourceSpec.url, query)]);\n};\n\nexport const selectMeta = createResourceSelector(\n  {\n    fetching: false,\n    fetched: null,\n    error: null,\n  },\n  ['meta']\n);\n\nexport const selectEntity = ({ entity, id }) =>\n  pathOr(null, ['entities', entity, id]);\n\nexport const selectCollection = createResourceSelector([], ['collections']);\n\nexport const selectExpandedCollection = (resource, query) => state => {\n  return compose(\n    map(entity => selectEntity(entity)(state)),\n    selectCollection(resource, query)\n  )(state);\n};\n","import { join, compose, toUpper, curry, pipe } from 'ramda';\n\nimport { CALL_API } from '../constants';\nimport createURL from '../../utils/create-url';\nimport getResource from '../resources';\n\nexport const makeType = curry(\n  compose(\n    toUpper,\n    join('.'),\n    (resource, action) => [resource, action]\n  )\n);\n\nconst callAPI = (resource, query = {}, data) => {\n  const resourceSpec = getResource(resource);\n\n  if (!resourceSpec) {\n    return {\n      type: makeType('undefined')('resource'),\n      resource,\n    };\n  }\n\n  const type = makeType(resource);\n\n  return {\n    type: type('action'),\n    [CALL_API]: {\n      ...resourceSpec,\n      query,\n      data,\n      url: createURL(resourceSpec.url, query),\n      types: {\n        success: type('success'),\n        failure: type('failure'),\n        request: type('request'),\n      },\n    },\n  };\n};\n\nexport const mapDispatchToProps = dispatch => ({\n  dispatch,\n  callAPI: pipe(\n    callAPI,\n    dispatch\n  ),\n});\n\nexport default callAPI;\n","import { omit } from 'ramda';\nimport template from 'url-template';\n\nexport default (url, params, exclude = []) => {\n  if (!url) return null;\n\n  return template.parse(url).expand(omit(exclude, params));\n};\n","import { pathOr, flip, compose, has } from 'ramda';\nimport { normalize, schema } from 'normalizr';\n\nconst post = new schema.Entity('post');\nconst user = new schema.Entity('user');\nconst comment = new schema.Entity('comment');\n\nconst normalizr = (entityName, schema) =>\n  compose(\n    normalized => {\n      if (!normalized.result || !Array.isArray(normalized.result)) {\n        return normalized;\n      }\n\n      normalized.result = normalized.result.map(id => ({\n        id,\n        entity: entityName,\n      }));\n\n      return normalized;\n    },\n    flip(normalize)(schema)\n  );\n\nexport const RESOURCES_MAP = {\n  posts: {\n    url: '/posts',\n    cache: true,\n    transform: normalizr('post', [post]),\n  },\n  post: {\n    url: '/posts/{id}',\n    cache: (state, _, { id }) =>\n      compose(\n        has(id),\n        pathOr({}, ['entities', 'post'])\n      )(state),\n    transform: normalizr('post', post),\n  },\n  user: {\n    url: '/users/{id}',\n    cache: true,\n    transform: normalizr('user', user),\n  },\n  comments: {\n    url: '/comments',\n    cache: true,\n    transform: normalizr('comment', [comment]),\n  },\n};\n\nexport default resource => pathOr(null, [resource], RESOURCES_MAP);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport withCommentsCount from '../../providers/comments-count';\n\nconst CommentsCount = withCommentsCount(({ count = 0 }) => (\n  <span>{count}</span>\n));\n\nexport default function Post({ counter, ...post }) {\n  return (\n    <>\n      <h3>\n        <Link to={`/post/${post.id}`}>{post.title}</Link>\n      </h3>\n\n      <p>{post.body}</p>\n\n      {counter && (\n        <p>\n          Comments:&nbsp;\n          <CommentsCount id={post.id} />\n        </p>\n      )}\n      <hr />\n    </>\n  );\n}\n","import { connect } from 'react-redux';\nimport { compose, countBy, prop, pathOr, values } from 'ramda';\n\nimport mapState from '../utils/map-state';\n\nexport default connect((_, props) =>\n  mapState({\n    count: compose(\n      prop(props.id),\n      countBy(prop('postId')),\n      values,\n      // Aggregate all comments in store\n      pathOr({}, ['entities', 'comment'])\n    ),\n  })\n);\n","import React, { useState } from 'react';\n\nimport Post from '../mini-post';\n\nexport default function PostsList({ posts, counter = false, limit = 5 }) {\n  const [offset, setOffset] = useState(limit);\n\n  const handleShowMore = () => setOffset(prevOffset => prevOffset + limit);\n\n  return (\n    <React.Fragment>\n      {posts.slice(0, offset).map(post => (\n        <Post {...post} key={post.id} counter={counter} />\n      ))}\n      {offset < posts.length && (\n        <button onClick={handleShowMore}>\n          <b>Show more</b>\n        </button>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { mapDispatchToProps } from '../../store/actions/call-api';\n\nimport mapState from '../../utils/map-state';\nimport { selectMeta, selectExpandedCollection } from '../../store/selectors';\nimport Loader from '../../components/loader';\nimport PostsList from '../../components/posts-list';\n\nfunction PostsPage({ callAPI, meta, metaComments, posts }) {\n  useEffect(() => {\n    callAPI('posts');\n    // Fetch all comments for counter\n    callAPI('comments');\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <h1>Posts</h1>\n\n      {meta.fetching && <Loader msg={'Fetching posts'} />}\n      {!!meta.error && <p>Error: {meta.error.status}</p>}\n      {meta.fetched && (\n        <PostsList posts={posts} counter={metaComments.fetched} />\n      )}\n    </div>\n  );\n}\n\nexport default connect(\n  mapState({\n    posts: selectExpandedCollection('posts'),\n    meta: selectMeta('posts'),\n    metaComments: selectMeta('comments'),\n  }),\n  mapDispatchToProps\n)(PostsPage);\n"],"sourceRoot":""}