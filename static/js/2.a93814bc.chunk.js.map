{"version":3,"sources":["store/selectors/index.js","utils/map-state.js","store/actions/call-api.js","utils/create-url.js","store/resources.js","utils/set-document-title.js","components/mini-post/index.js","providers/comments-count.js","components/posts-list/index.js","pages/posts/index.js"],"names":["createResourceSelector","defaults","path","resource","query","resourceSpec","getResource","pathOr","Object","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","concat","createUrl","url","console","warn","always","selectMeta","fetching","fetched","error","selectEntity","_ref","entity","id","selectCollection","selectExpandedCollection","state","compose","map","__webpack_exports__","selectors","_len","arguments","length","args","Array","_key","toPairs","reduce","acc","_ref2","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","key","selector","apply","makeType","curry","toUpper","join","action","callAPI","undefined","data","type","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","CALL_API","_Users_mmorozov_7tv_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","createURL","types","success","failure","request","mapDispatchToProps","dispatch","pipe","ramda__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","url_template__WEBPACK_IMPORTED_MODULE_1__","url_template__WEBPACK_IMPORTED_MODULE_1___default","n","params","exclude","template","parse","expand","omit","normalizr__WEBPACK_IMPORTED_MODULE_1__","post","schema","Entity","user","comment","normalizr","entityName","normalized","result","isArray","flip","normalize","RESOURCES_MAP","posts","cache","transform","_","has","comments","d","useDocumentTitle","react__WEBPACK_IMPORTED_MODULE_0__","title","useEffect","document","CommentsCount","connect","props","mapState","count","prop","countBy","values","withCommentsCount","_ref$count","react_default","a","createElement","Post","counter","objectWithoutProperties","Fragment","Link","to","body","PostsList","_ref$counter","_ref$limit","limit","_useState","useState","_useState2","slicedToArray","offset","setOffset","slice","assign","onClick","prevOffset","meta","metaComments","className","loader","msg","status"],"mappings":"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","file":"static/js/2.a93814bc.chunk.js","sourcesContent":["import { pathOr, always, compose, map } from 'ramda';\n\nimport getResource from '../resources';\n\nimport createUrl from '../../utils/create-url';\n\nconst createResourceSelector = (defaults, path) => (resource, query) => {\n  const resourceSpec = getResource(resource);\n\n  if (!resourceSpec) {\n    console.warn('Undefined resource', resource);\n    return always(defaults);\n  }\n\n  return pathOr(defaults, [...path, createUrl(resourceSpec.url, query)]);\n};\n\nexport const selectMeta = createResourceSelector(\n  {\n    fetching: false,\n    fetched: null,\n    error: null,\n  },\n  ['meta']\n);\n\nexport const selectEntity = ({ entity, id }) =>\n  pathOr(null, ['entities', entity, id]);\n\nexport const selectCollection = createResourceSelector([], ['collections']);\n\nexport const selectExpandedCollection = (resource, query) => state => {\n  return compose(\n    map(entity => selectEntity(entity)(state)),\n    selectCollection(resource, query)\n  )(state);\n};\n","import { toPairs } from 'ramda';\n\nexport default selectors => (...args) => {\n  return toPairs(selectors).reduce((acc, [key, selector]) => {\n    acc[key] = selector(...args);\n    return acc;\n  }, {});\n};\n","import { join, compose, toUpper, curry, pipe } from 'ramda';\n\nimport { CALL_API } from '../constants';\nimport createURL from '../../utils/create-url';\nimport getResource from '../resources';\n\nexport const makeType = curry(\n  compose(\n    toUpper,\n    join('.'),\n    (resource, action) => [resource, action]\n  )\n);\n\nconst callAPI = (resource, query = {}, data) => {\n  const resourceSpec = getResource(resource);\n\n  if (!resourceSpec) {\n    return {\n      type: makeType('undefined')('resource'),\n      resource,\n    };\n  }\n\n  const type = makeType(resource);\n\n  return {\n    type: type('action'),\n    [CALL_API]: {\n      ...resourceSpec,\n      query,\n      data,\n      url: createURL(resourceSpec.url, query),\n      types: {\n        success: type('success'),\n        failure: type('failure'),\n        request: type('request'),\n      },\n    },\n  };\n};\n\nexport const mapDispatchToProps = dispatch => ({\n  dispatch,\n  callAPI: pipe(\n    callAPI,\n    dispatch\n  ),\n});\n\nexport default callAPI;\n","import { omit } from 'ramda';\nimport template from 'url-template';\n\nexport default (url, params, exclude = []) => {\n  if (!url) return null;\n\n  return template.parse(url).expand(omit(exclude, params));\n};\n","import { pathOr, flip, compose, has } from 'ramda';\nimport { normalize, schema } from 'normalizr';\n\nconst post = new schema.Entity('post');\nconst user = new schema.Entity('user');\nconst comment = new schema.Entity('comment');\n\nconst normalizr = (entityName, schema) =>\n  compose(\n    normalized => {\n      if (!normalized.result || !Array.isArray(normalized.result)) {\n        return normalized;\n      }\n\n      normalized.result = normalized.result.map(id => ({\n        id,\n        entity: entityName,\n      }));\n\n      return normalized;\n    },\n    flip(normalize)(schema)\n  );\n\nexport const RESOURCES_MAP = {\n  posts: {\n    url: '/posts',\n    cache: true,\n    transform: normalizr('post', [post]),\n  },\n  post: {\n    url: '/posts/{id}',\n    cache: (state, _, { id }) =>\n      compose(\n        has(id),\n        pathOr({}, ['entities', 'post'])\n      )(state),\n    transform: normalizr('post', post),\n  },\n  user: {\n    url: '/users/{id}',\n    cache: true,\n    transform: normalizr('user', user),\n  },\n  comments: {\n    url: '/comments',\n    cache: true,\n    transform: normalizr('comment', [comment]),\n  },\n};\n\nexport default resource => pathOr(null, [resource], RESOURCES_MAP);\n","import { useEffect } from 'react';\n\nexport function useDocumentTitle(title) {\n  useEffect(\n    () => {\n      document.title = title;\n      return () => (document.title = '');\n    },\n    [title]\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport withCommentsCount from '../../providers/comments-count';\n\nconst CommentsCount = withCommentsCount(({ count = 0 }) => (\n  <span>{count}</span>\n));\n\nexport default function Post({ counter, ...post }) {\n  return (\n    <>\n      <h3>\n        <Link to={`/post/${post.id}`}>{post.title}</Link>\n      </h3>\n\n      <p>{post.body}</p>\n\n      {counter && (\n        <p>\n          Comments:&nbsp;\n          <CommentsCount id={post.id} />\n        </p>\n      )}\n      <hr />\n    </>\n  );\n}\n","import { connect } from 'react-redux';\nimport { compose, countBy, prop, pathOr, values } from 'ramda';\n\nimport mapState from '../utils/map-state';\n\nexport default connect((_, props) =>\n  mapState({\n    count: compose(\n      prop(props.id),\n      countBy(prop('postId')),\n      values,\n      // Aggregate all comments in store\n      pathOr({}, ['entities', 'comment'])\n    ),\n  })\n);\n","import React, { useState } from 'react';\n\nimport Post from '../mini-post';\n\nexport default function PostsList({ posts, counter = false, limit = 5 }) {\n  const [offset, setOffset] = useState(limit);\n\n  const handleShowMore = () => setOffset(prevOffset => prevOffset + limit);\n\n  return (\n    <React.Fragment>\n      {posts.slice(0, offset).map(post => (\n        <Post {...post} key={post.id} counter={counter} />\n      ))}\n      {offset < posts.length && (\n        <button onClick={handleShowMore}>\n          <b>Show more</b>\n        </button>\n      )}\n    </React.Fragment>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { mapDispatchToProps } from '../../store/actions/call-api';\n\nimport { selectMeta, selectExpandedCollection } from '../../store/selectors';\nimport Loader from '../../components/loader';\nimport PostsList from '../../components/posts-list';\n\nimport mapState from '../../utils/map-state';\nimport { useDocumentTitle } from '../../utils/set-document-title';\n\nfunction PostsPage({ callAPI, meta, metaComments, posts }) {\n  useEffect(() => {\n    callAPI('posts');\n    // Fetch all comments for counter\n    callAPI('comments');\n  }, []);\n\n  useDocumentTitle('Posts');\n\n  return (\n    <div className=\"page\">\n      <h1>Posts</h1>\n\n      {meta.fetching && <Loader msg={'Fetching posts'} />}\n      {!!meta.error && <p>Error: {meta.error.status}</p>}\n      {meta.fetched && (\n        <PostsList posts={posts} counter={metaComments.fetched} />\n      )}\n    </div>\n  );\n}\n\nexport default connect(\n  mapState({\n    posts: selectExpandedCollection('posts'),\n    meta: selectMeta('posts'),\n    metaComments: selectMeta('comments'),\n  }),\n  mapDispatchToProps\n)(PostsPage);\n"],"sourceRoot":""}